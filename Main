module main_verilog (
	input CLK,		// входной тактовый сигнал с частотой 40 МНг и периодом 25нс 
	input [7:0] IN_BYTE,		// байт принятый по  RS232 
	input MOD,			// сигнал переключения приема и отправки
	input SET,		//сигнал переключения настройки будильника и часов
	input CONF,			//сигнал подтверждения настройки
	input ALARM,		//сигнал включения, отключения будильника
	input SBUSY,	// сигнал занятости подчиненного устройства (0-свободен, 1-занят)
	output [127:0] BUFFER,//нижняя строка	
	output reg SEND_JKI,	//управляющий сигнал вывода инфы на экран
	output reg RECEIVE,	// управляющий сигнал - начать прием байт по RS232
	output reg RESET,	// сброс ведомых устройств (для вывода их из режима ожидания байта по RS232)
	output [7:0] VD,	//информация о состоянии передачи на светодиоды
	output [127:0] UP_STR,//верхняя строка
	output vd_a //вывод о включенном будильнике
	);	
	
parameter BAUD = 347; 			// выбор делителя для скорости 115200
reg cl_al=1;              //сбрасывали ли за сутки будильник: 1-нет, 0-да
reg [127:0] up_str;				//буфер для хранения верхней строки
reg [127:0] buffer;				// буфер для хранения нижней строки
reg [7:0] vd = 0;         //блок инфы для светодиодов
reg [2:0] receive_cnt = 0;		// счетчик полученных байт
reg [4:0] r_state_al = 0;			// автомат приема байт будильника
reg [4:0] r_state_ti = 0;		// автомат приема байт таймера
reg [4:0] s_state_ti = 0;		// автомат отправки данных о времени на ЖК
reg [4:0] t_state = 0;			//автомат приращения часов
reg [127:0] time1={"00:00:00        "}; // время в символьной форме
reg [127:0] alarm1={"00:00           "}; //запоминает будильник
reg [127:0] alarm2={"00:00:00        "}; //нижняя граница звона будильника
reg [127:0] alarm3={"00:00:59        "}; //верхняя граница звона будильника
reg [16:0] bin_time;        //время в числовой форме
reg [28:0] delay = 0;       //задержка для прибавления секунды

assign BUFFER = buffer;
assign VD = vd;
assign UP_STR = up_str;
assign vd_a = ALARM;
always @(posedge CLK) 

begin
	delay<=delay+29'd1; //тиканье часов - один такт 25 нс
	if (delay>=40000000) 
	begin
		delay<=0;
	end
	if (delay<8)
	case (t_state)  //правильное приращение часов
		0: begin time1[67:64]=time1[67:64]+4'd1; t_state<=1; end //прибавили к первому разряду секунд
		1: if (time1[67:64]>9) begin time1[75:72]= time1[75:72]+4'd1;time1[67:64]=0; t_state<=2; end
		else t_state<=7;
		2: if (time1[75:72]>5) begin time1[91:88]= time1[91:88]+4'd1;time1[75:72]=0; t_state<=3; end
		else t_state<=7;
		3: if (time1[91:88]>9) begin time1[99:96]= time1[99:96]+4'd1;time1[91:88]=0; t_state<=4; end
		else t_state<=7;
		4: if (time1[99:96]>5) begin time1[115:112]= time1[115:112]+4'd1;time1[99:96]=0; 
		if ((time1[115:112]>9)&&(time1[123:120]<2)) t_state<=5; //если час 0 и 1 -старший и младший>9, то увеличиваем старший
		else if ((time1[115:112]==4)&&(time1[123:120]==2)) t_state<=6; end //если 24 часа, то все обнуляем
		else t_state<=7;
		5: begin time1[123:120]= time1[123:120]+4'd1;time1[115:112]=0; t_state<=7; end
		6: begin time1[123:120]= 0;time1[115:112]=0; t_state<=7; end
		endcase
	else t_state<=0;	
	if ((alarm2>=time1)||(ALARM==0)) cl_al=1;//будильник будет срабатывать
	case (MOD)
	//режим часов
	0: begin
		RECEIVE = 0;
		RESET = 1;
		r_state_al<= 0;		
		r_state_ti<= 0;
		if (CONF==1) cl_al=0; //если нажали кнопку, то перестают мегать диоды
		//обработка будильника
		if ((ALARM==1)&&(cl_al==1)&&(time1>=alarm2)&&(time1<=alarm3)) begin
			if (delay<=20000000) vd<=170;
			else vd<=85; end
		else vd<=0;		
		case (s_state_ti)//отправляем время на ЖКИ
		0: begin up_str = {"   .   .   32168"}; buffer={"   .   .   04021"}; s_state_ti <= 1; time1[63:0] = {"        "};alarm1[63:0] = {"        "}; end
		1: if (delay>8) begin//формирования двузначных чисел времени из цифр
			bin_time[16:12]=time1[115:112]+time1[123:120]*4'd10;
			bin_time[11:6]=time1[91:88]+time1[99:96]*4'd10;
			bin_time[5:0]=time1[67:64]+time1[75:72]*4'd10;
			s_state_ti <= 2;
			end
		2:  begin//формирование строк для вывода бинарного времени
			//часы
			if (bin_time[16:16]) up_str[119:112]=8'b11111111; else up_str[119:112]=8'b00100000;
			if (bin_time[15:15]) up_str[111:104]=8'b11111111; else up_str[111:104]=8'b00100000;
			
			if (bin_time[14:14]) buffer[127:120]=8'b11111111; else buffer[127:120]=8'b00100000;
			if (bin_time[13:13]) buffer[119:112]=8'b11111111; else buffer[119:112]=8'b00100000;
			if (bin_time[12:12]) buffer[111:104]=8'b11111111; else buffer[111:104]=8'b00100000;
			//минуты
			if (bin_time[11:11]) up_str[95:88]=8'b11111111; else up_str[95:88]=8'b00100000;
			if (bin_time[10:10]) up_str[87:80]=8'b11111111; else up_str[87:80]=8'b00100000;
			if (bin_time[9:9]) up_str[79:72]=8'b11111111; else up_str[79:72]=8'b00100000;
			
			if (bin_time[8:8]) buffer[95:88]=8'b11111111; else buffer[95:88]=8'b00100000;
			if (bin_time[7:7]) buffer[87:80]=8'b11111111; else buffer[87:80]=8'b00100000;
			if (bin_time[6:6]) buffer[79:72]=8'b11111111; else buffer[79:72]=8'b00100000;
			//секунды
			if (bin_time[5:5]) up_str[63:56]=8'b11111111; else up_str[63:56]=8'b00100000;
			if (bin_time[4:4]) up_str[55:48]=8'b11111111; else up_str[55:48]=8'b00100000;
			if (bin_time[3:3]) up_str[47:40]=8'b11111111; else up_str[47:40]=8'b00100000;
			if (bin_time[2:2]) buffer[63:56]=8'b11111111; else buffer[63:56]=8'b00100000;
			if (bin_time[1:1]) buffer[55:48]=8'b11111111; else buffer[55:48]=8'b00100000;
			if (bin_time[0:0]) buffer[47:40]=8'b11111111; else buffer[47:40]=8'b00100000;			
			s_state_ti <= 3; end
		3: begin//отправка управляющего сигнала записи на ЖКИ
			if (SBUSY == 0) begin
				SEND_JKI = ~SEND_JKI;
				s_state_ti <= 4;
			end
		end
		4: begin
			if (SBUSY == 1) begin 
				s_state_ti <= 5;
			end
		end	
		5: if ((SBUSY == 0)&&(delay<8)) s_state_ti <= 1;//ждем пока ЖКИ освободится и новой секунды
		default: s_state_ti <= 0;
		endcase
	end
	//режим настройки
	1: begin
		case (SET)
		0: begin 
			case (r_state_ti)//настройка часов
			0: begin//задание начальных строк, которые надо вывести
				up_str = {"Hac",8'b10111111,"po",8'b10111001,8'b10111111,"e ",8'b10110011,"pe",8'b10111100,8'b11000111," "};
				buffer=time1;//выводим текущее время
				alarm1[63:0] = {"        "};//стирание надписи "ОШИБКА"
				receive_cnt<=0;
				r_state_ti<=1;
				vd<=0;
				r_state_al<= 0;
				RESET = 1;//сбрасывает ожидание приема
				s_state_ti<=0;
			end
			1: begin//отправка на ЖКИ
				if (SBUSY == 0) begin//если не занят, то управляющий сигнал записи
					SEND_JKI =~SEND_JKI;
					r_state_ti<=2;
				end
			end
			2: begin//увеличение принятых байт
				RESET = 0;
				RECEIVE = 0;
				receive_cnt = receive_cnt + 3'd1;
				r_state_ti <= 3;
			end
			3: begin//смотрим какой пакет получать данных
				if (SBUSY == 1) begin
					RECEIVE = 0;
					case (vd)
					0: begin r_state_ti <= 4; end
					1: begin r_state_ti <= 5; end
					3: begin r_state_ti <= 6; end
					endcase
				end
				else RECEIVE = 1;
			end
			4: begin//первый пакет в буфер - часы
				if (SBUSY == 0) begin
					RESET = 1;				
					case (receive_cnt)
					1: begin 
						buffer[127:120] = IN_BYTE;
						r_state_ti <= 2;//без обновления ЖКИ
					end
					2: begin 
						buffer[119:112] = IN_BYTE;
						r_state_ti <= 1;//с обновлением ЖКИ
						vd = vd+8'd1;
					end
					endcase
				end
			end
			5: begin//второй пакет в буфер - минуты
				if (CONF==1) begin r_state_ti<=7; end//если кнопку нажали, то сохраняем
				else//иначе дальше принимаем
					if (SBUSY == 0) begin
						RESET = 1;				
						case (receive_cnt)
						3: begin 
							buffer[103:96] = IN_BYTE;
							r_state_ti <= 2;
						end
						4: begin 
							buffer[95:88] = IN_BYTE;
							r_state_ti <= 1;
							vd = vd+8'd2;
						end
						endcase
					end
			end
			6: begin//третий пакет в буфер - секунды
				if (CONF==1) begin r_state_ti<=7; end
				else
					if (SBUSY == 0) begin
						RESET = 1;				
						case (receive_cnt)
						5: begin 
							buffer[79:72] = IN_BYTE;
							r_state_ti <= 2;
						end
						6: begin 
							buffer[71:64] = IN_BYTE;
							r_state_ti <= 7;
						end
						endcase
					end
			end
			7: begin//зажигаем светодиоды и из буффера записываем время
				vd<=255;
				time1<=buffer;
				delay<=0; //сбросим счетчик секунд
				r_state_ti<=8;
			end
			8: begin //проверка и исправление правильности секунд и минут
				if (time1[71:64]>8'b00111001) time1[71:64]=8'b00111001;
				if (time1[71:64]<8'b00110000) time1[71:64]=8'b00110000;
			
				if (time1[79:72]>8'b00110101) time1[79:72]=8'b00110101;				if (time1[79:72]<8'b00110000) time1[79:72]=8'b00110000;				if (time1[95:88]>8'b00111001) time1[95:88]=8'b00111001;				if (time1[95:88]<8'b00110000) time1[95:88]=8'b00110000;				if (time1[103:96]>8'b00110101) time1[103:96]=8'b00110101;				if (time1[103:96]<8'b00110000) time1[103:96]=8'b00110000;				if (time1[127:120]>8'b00110010) time1[127:120]=8'b00110010;		if (time1[127:120]<8'b00110000) time1[127:120]=8'b00110000;
				r_state_ti<=9;
			end
			9: begin//проверка и исправление правильности часов
				if (time1[127:120]==8'b00110010) begin 
					if (time1[119:112]>8'b00110011) time1[119:112]=8'b00110011; end
	else begin			
					if (time1[119:112]>8'b00111001) time1[119:112]=8'b00111001; end
					if (time1[119:112]<8'b00110000) time1[119:112]=8'b00110000;		
				r_state_ti<=10;
			end
			10: begin buffer=time1; r_state_ti<=11; end //запись времени в строку для передачи
			11:if (SBUSY == 0)
				begin //отправка управляющего сигнала на запись
					SEND_JKI =~SEND_JKI;
					r_state_ti<=12;
				end
			12: begin
				RESET = 1;
			end
			default: r_state_ti<= 0;
			endcase
		end
		1:  begin 
			case (r_state_al)//настройка будильника
			0: begin
				up_str = {"Hac",8'b10111111,"po",8'b10111001,8'b10111111,"e ",8'b10110010,"y",8'b11100011,".  "};
				time1[63:0] = {"        "};//стирание надписи "ОШИБКА"
				buffer=alarm1;//загружаем старый будильник
				receive_cnt<=0;
				r_state_al<=1;
				vd<=0;
				r_state_ti<= 0;
				RESET = 1;
				s_state_ti<=0;
			end
			1: begin
				if (SBUSY == 0) begin //отправка на жки
					SEND_JKI =~SEND_JKI;
					r_state_al<=2;
				end
			end
			2: begin
				RESET = 0;
				RECEIVE = 0;
				receive_cnt = receive_cnt + 3'd1;
				r_state_al <= 3;
			end
			3: begin
				if (SBUSY == 1) begin//выбор получаемого разряда(минуты, часы)
					RECEIVE = 0;
					case (vd)
					0: begin
						r_state_al <= 4;
					end
					1: begin
						r_state_al <= 5;
					end
					endcase
				end
				else RECEIVE = 1;
			end
			4: begin//получение часов
				if (SBUSY == 0) begin
					RESET = 1;				
					case (receive_cnt)
					1: begin 
						buffer[127:120] = IN_BYTE;
						r_state_al <= 2;
					end
					2: begin 
						buffer[119:112] = IN_BYTE;
						r_state_al <= 1;
						vd = vd+8'd1;
					end
					endcase
				end
			end
			5: begin//получение минут
				if (CONF==1) begin r_state_al<=6; end//подтверждение - конец приема
				else
					if (SBUSY == 0) begin
						RESET = 1;				
						case (receive_cnt)
						3: begin 
							buffer[103:96] = IN_BYTE;
							r_state_al <= 2;
						end
						4: begin 
							buffer[95:88] = IN_BYTE;
							r_state_al <= 6;
						end
						endcase
					end
			end
			6: begin
				vd<=255; 
				alarm1=buffer; 
				r_state_al<=7;
			end
			7: begin 
				if (alarm1[95:88]>8'b00111001) alarm1[95:88]=8'b00111001;
				if (alarm1[95:88]<8'b00110000) alarm1[95:88]=8'b00110000;
				if (alarm1[103:96]>8'b00110101) alarm1[103:96]=8'b00110101;
				if (alarm1[103:96]<8'b00110000) alarm1[103:96]=8'b00110000;
				if (alarm1[127:120]>8'b00110010) alarm1[127:120]=8'b00110010;
				if (alarm1[127:120]<8'b00110000) alarm1[127:120]=8'b00110000;
				r_state_al<=8;
			end
			8: begin
				if (alarm1[127:120]==8'b00110010) begin 
					if (alarm1[119:112]>8'b00110011) alarm1[119:112]=8'b00110011; end
				else begin			
					if (alarm1[119:112]>8'b00111001) alarm1[119:112]=8'b00111001; end
					if (alarm1[119:112]<8'b00110000) alarm1[119:112]=8'b00110000;
				r_state_al<=9;
			end
			9: begin //перезапись время срабатывания будильника(00:00) в время работы будильника(00:00:00-59)
				buffer=alarm1;
				alarm2[127:88]=alarm1[127:88];
				alarm3[127:88]=alarm1[127:88];
				r_state_al<=10; end 
			10:if (SBUSY == 0)
				begin 
					SEND_JKI =~SEND_JKI;
					r_state_al<=11;
				end
			11: begin
				RESET = 1;
			end
			default: r_state_al<= 0;
			endcase
		end
		endcase
	end
	endcase
end
endmodule
